import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = "7954452949:AAFPjobmKF43QWu6oFC2szX_xTvoc9uClkk"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!
ADMIN_CODE = "123"   # –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ PostgreSQL)
db = {
    "categories": {
        "–î–µ–≤—É—à–∫–∏": "rating:safe",
        "–ö–æ—Ç–∏–∫–∏": "neko",
        "–ú–µ–π–¥": "maid",
        "NSFW": "rating:explicit"
    },
    "users": {}
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
def categories_kb():
    kb = types.InlineKeyboardMarkup(row_width=2)
    for name in db["categories"]:
        kb.insert(types.InlineKeyboardButton(name, callback_data=f"cat_{name}"))
    return kb

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
def admin_kb():
    return types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="del_category")
    )

# –ö–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("üéå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_kb())

@dp.message_handler(commands=['admin'])
async def admin_cmd(message: types.Message):
    if message.get_args() == ADMIN_CODE:
        await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb())
    else:
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(Text(startswith="cat_"))
async def send_category(callback: types.CallbackQuery):
    cat_name = callback.data.split("_")[1]
    tag = db["categories"][cat_name]
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à –ø–∞—Ä—Å–µ—Ä (–ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ)
    image_url = await get_danbooru_image(tag)
    
    await callback.message.answer_photo(
        photo=image_url,
        caption=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}"
    )
    await callback.answer()

# –ê–¥–º–∏–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(Text("add_category"))
async def add_category(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–ù–∞–∑–≤–∞–Ω–∏–µ>;<–¢–µ–≥ Danbooru>\n–ü—Ä–∏–º–µ—Ä: –ê–Ω–≥–µ–ª—ã;angel")
    await state.set_state("wait_new_category")
    await callback.answer()

@dp.message_handler(state="wait_new_category")
async def process_category(message: types.Message, state: FSMContext):
    try:
        name, tag = message.text.split(";")
        db["categories"][name.strip()] = tag.strip()
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {name} ‚Üí {tag}")
        await state.finish()
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: –î–µ–º–æ–Ω—ã;demon")
        await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
