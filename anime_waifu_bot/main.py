from aiogram import Bot, Dispatcher, executor, types
from parser import get_random_danbooru_image
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
bot = Bot(token="–í–ê–®_–¢–û–ö–ï–ù")
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /waifu –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –∞–Ω–∏–º–µ-–∫–∞—Ä—Ç–∏–Ω–∫–∏")

@dp.message_handler(commands=['waifu'])
async def waifu(message: types.Message):
    try:
        img_url = await get_random_danbooru_image()
        
        await message.answer_photo(
            photo=img_url,
            caption="–°–ª—É—á–∞–π–Ω–∞—è –≤–∞–π—Ñ—É —Å Danbooru",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(
                    "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    callback_data=f"fav_{img_url.split('/')[-1]}"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
                )
            )
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üò¢")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
