import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from config import BOT_TOKEN, PROXY_URL
from parser import get_random_waifu, search_waifu
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, proxy=PROXY_URL if PROXY_URL else None)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database("waifu_db.sqlite")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∞–Ω–∏–º–µ-–¥–µ–≤–æ—á–∫–∞–º–∏ üéÄ\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/waifu ‚Äì —Å–ª—É—á–∞–π–Ω–∞—è –¥–µ–≤–æ—á–∫–∞\n"
        "/search [—Ç–µ–≥] ‚Äì –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É\n"
        "/fav ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
        "/myfav ‚Äì –º–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ\n"
        "/nsfw [on/off] ‚Äì —Ä–µ–∂–∏–º 18+"
    )

# –°–ª—É—á–∞–π–Ω–∞—è –≤–∞–π—Ñ—É (/waifu)
@dp.message_handler(commands=['waifu'])
async def random_waifu(message: types.Message):
    try:
        img_url = await get_random_waifu()
        await message.reply_photo(img_url, reply_markup=get_fav_keyboard(img_url))
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

# –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É (/search cat_girl)
@dp.message_handler(commands=['search'])
async def search_by_tag(message: types.Message):
    tag = message.get_args()
    if not tag:
        await message.reply("–£–∫–∞–∂–∏ —Ç–µ–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: /search cat_girl")
        return
    try:
        img_url = await search_waifu(tag)
        await message.reply_photo(img_url, reply_markup=get_fav_keyboard(img_url))
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

# –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
def get_fav_keyboard(img_url: str):
    return types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{img_url}")
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@dp.callback_query_handler(Text(startswith="fav_"))
async def add_to_fav(callback: types.CallbackQuery):
    img_url = callback.data.split("_")[1]
    user_id = callback.from_user.id
    db.add_to_favorites(user_id, img_url)
    await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
